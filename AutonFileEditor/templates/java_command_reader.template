package {{ package }};

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.List;

import com.snobot.xlib.ACommandParser;

import edu.wpi.first.wpilibj.command.Command;

public class CommandParser extends ACommandParser
{
    private static final String sDELIMITER = " ";
    private static final String sCOMMENT_START = "#";

    // Autonomous Commands
    private static final String sPARALLEL_COMMAND = "Parallel";
    private static final String sWAIT_COMMAND = "Wait";
{{ command_name_constants }}

    public CommandParser()
    {
        super(sDELIMITER, sCOMMENT_START);

    }

    @Override
    protected Command parseCommand(List<String> args)
    {
        String commandName = args.get(0);

        Command newCommand = null;

        try
        {
            switch (commandName)
            {
            case sPARALLEL_COMMAND:
            {
                newCommand = parseParallelCommand(args);
                break;
            }
            case sWAIT_COMMAND:
            {
                //double time = Double.parseDouble(args.get(1));
                //newCommand = new WaitCommand(time);
                break;
            }
{{ command_cases }}
            default:
                addError("Unknown command name: " + commandName);
                break;
            }
        }
        catch (IndexOutOfBoundsException e)
        {
            addError("You have not specified enough arguments for the command: " + commandName + ".  " + e.getMessage());
        }
        catch (Exception e)
        {
            addError("Unknown exception has occured parsing: " + commandName + ".  " + e.getMessage());
            e.printStackTrace();
        }

        return newCommand;
    }

    @Override
    protected void publishParsingResults(String aCommandString)
    {
        if (!mErrorText.isEmpty())
        {
            aCommandString += "\n\n# There was an error parsing the commands...\n#\n";
            aCommandString += mErrorText;
        }
        
        //TODO publish results...
    }

    @Override
    protected void initReading()
    {
        super.initReading();
        
        //TODO initReading...
    }
}
